{"version":3,"sources":["components/Header.jsx","components/Items.jsx","App.js","store/actions/itemActions.js","serviceWorker.js","index.js","store/reducers/rootReducer.js"],"names":["Header","props","react_default","a","createElement","className","onSubmit","searchInit","autoComplete","htmlFor","type","id","name","Items","console","log","this","items","renderList","Component","App","state","search","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","searchResult","components_Header","undefined","components_Items","connect","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","response","wrap","_context","prev","next","axios","get","concat","sent","payload","data","collection","stop","_x","apply","arguments","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","store","createStore","length","action","toConsumableArray","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.73c24f0f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = props => (\n  <header className=\"app__header\">\n    <h1 className=\"app__header--title\">SPACER</h1> \n    <p>Begin your journey through aour amazing galaxy,\n    ans discover places you never even heard of.</p>    \n    <form className=\"app__search\" onSubmit={props.searchInit} autoComplete=\"off\">\n      <label htmlFor=\"search\">Type anything space-related to start.</label>\n      <input type=\"text\" id=\"search\" name=\"searchItem\" autoComplete=\"off\"/>\n    </form>\n  </header>\n)\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nclass Items extends Component {\n  renderList(){\n    console.log(this.props.items);\n    // return this.props.items.map( post => {\n    //     return (\n    //         <div className=\"item\" key={post.id}>\n    //             <i className=\" large middle aligned icon user\" />\n    //             <div className=\"content\">\n    //                 <div className=\"description\">\n    //                     <h2>{post.title}</h2>\n    //                     <p>{post.body}</p>\n    //                 </div>\n    //             </div>\n    //         </div>       \n    //     )\n    // })\n  }\n  render(){\n       return(\n        <div>\n          {this.renderList()};\n        </div>\n      );\n    }  \n  }\n\n// const mapStateToPops = (state) => {\n//   return {items: state.items}\n// }\n// export default connect(mapStateToPops)(Items);\nexport default Items;\n\n\n\n// {props.items.map((item) => {\n//   return (\n//     <div className=\"app__item\" key={item.data[0].nasa_id}>\n//         <img src={item.links[0].href} alt={item.data[0].title}/>\n//         <div className=\"app__item--data\">\n//             <h2>{item.data[0].title}</h2>\n//             <p>{item.data[0].date_created}</p>\n//             <p>{item.data[0].secondary_creator}</p> \n//             <p>{item.data[0].description}</p> \n//         </div>\n       \n//     </div>\n//   )\n// })}","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport Items from './components/Items'\n// import axios from 'axios';\nimport { connect } from 'react-redux'\nimport { searchResult } from './store/actions/itemActions'\n// const API_KEY = \"0RaxnQux6XYWfhbKSV1XlOBxPz2WczBgzYo3Olpj\";\n// const API = \"https://images-api.nasa.gov\";\n\nclass App extends Component {\n  state = {\n    search: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      search:  e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.searchResult(this.state.search);\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <Header searchInit={this.searchInit}/>\n        {/* <header className=\"app__header\">\n          <h1 className=\"app__header--title\">SPACER</h1> \n          <p>Begin your journey through aour amazing galaxy,\n          ans discover places you never even heard of.</p>    \n          <form className=\"app__search\" onSubmit={this.handleSubmit} autoComplete=\"off\">\n            <label htmlFor=\"search\">Type anything space-related to start.</label>\n            <input type=\"text\" id=\"search\" name=\"searchItem\" autoComplete=\"off\" onChange={this.handleChange}/>\n          </form>\n        </header> */}\n        <footer>\n        {this.props.items !== undefined ? <Items items={this.props.items}/> : null}\n        </footer>\n        {/* {itemList} */}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {items: state.items}\n}\n// const mapDispatchToProps = (dispatch) => {\n//   return{\n//     searchResult: (search) => dispatch(searchResult(search))\n//   }\n// }\n\nexport default connect(mapStateToProps, { searchResult })(App);\n","import axios from 'axios';\n\nexport const searchResult = search => async dispatch => {\n  const response = await axios.get(`https://images-api.nasa.gov/search?q=${search}`);\n  console.log(response);\n  dispatch({\n    type: 'SEARCH_RESULT',\n    payload: response.data.collection.items\n  });\n   \n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","\nexport default (state = [], action) => {\n    switch(action.type){\n        case 'SEARCH_RESULT':\n        console.log(action.payload);\n            return [...state, action.payload];\n        default:\n            return state;\n    };\n}\n"],"sourceRoot":""}